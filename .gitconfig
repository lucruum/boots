[alias]
    b = branch

    c = checkout

    copy = cherry-pick

    cl =    !git clean --dry-run --force -dx && \
            read -p 'Remove [Y/n]? ' && \
            case ${REPLY:-yes} in  \
                y | yes ) git clean --force -dx";;" \
                n | no ) ";;" \
                * ) echo \"I'll take that as a 'no'\" ";;" \
            esac

    cane = commit --all --amend --no-edit
    wip = commit --all --message=[WIP]

    d = diff --ignore-all-space --word-diff-regex=[[:alnum:]_]+|[[:punct:]] --word-diff=color
    dc = diff --ignore-all-space --word-diff-regex=. --word-diff=color
    dd = diff --format= --stat

    l = log --decorate --graph --oneline -25

    p = push
    pane = !git cane && git push --force

    edit = "!f () { \
        [[ `git rev-list ${1:-HEAD} --parents -1 | wc --words` == 1 ]] && \
        git -c sequence.editor=\"sed '1 s/pick/edit/' --in-place\" rebase --interactive --root || \
        git -c sequence.editor=\"sed '1 s/pick/edit/' --in-place\" rebase ${1:-HEAD}~1 --interactive; \
    }; f"
    reword = "!f () { \
        [[ `git rev-list ${1:-HEAD} --parents -1 | wc --words` == 1 ]] && \
        git -c sequence.editor=\"sed '1 s/pick/reword/' --in-place\" rebase --interactive --root || \
        git -c sequence.editor=\"sed '1 s/pick/reword/' --in-place\" rebase ${1:-HEAD}~1 --interactive; \
    }; f"

    del = reset HEAD~1 --hard
    kill = !git reset HEAD~1 --soft && git reset
    rollback =  !git rebase --abort";" \
                git clean --force -dx && \
                git reset --hard && \
                git checkout `git remote show origin | sed '/HEAD branch/s/.*: //p' --quiet` && \
                git reset origin/`git remote show origin | sed '/HEAD branch/s/.*: //p' --quiet` --hard

    s = show --ignore-all-space --word-diff-regex=[[:alnum:]_]+|[[:punct:]] --word-diff=color
    sc = show --ignore-all-space --word-diff-regex=. --word-diff=color
    ss = show --format= --stat

    comma = stash push --message
    dot = stash show --patch
    drop = stash drop
    dup = stash apply
    hide = stash push
    reveal = stash pop
    shelve =    !. \"`git --exec-path`/git-sh-setup\" && \
                require_clean_work_tree shelve && \
                m=`git log --format=%B -1` && \
                git reset HEAD~1 --soft && \
                git stash push --message=\"$m\"
    swap =  ![[ -n "`git status --porcelain`" ]] && \
            (git add --all --force && git comma [BUFFER]) || \
            (git reveal && git reset)
    unshelve =  !. \"`git --exec-path`/git-sh-setup\" && \
                require_clean_work_tree unshelve && \
                m=`git stash list --format=%B -1 | sed '1 s/On [^:]+: //' --regexp-extended` && \
                git stash pop && \
                git commit --all --message=\"$m\"

    st = status

[core]
    editor = code --wait
    pager =
    quotepath = false

[user]
    email = naoh432@mail.ru
    name = lucruum
