[alias]
    b = branch

    c = checkout

    copy = cherry-pick

    cl = "!f () { \
        [[ ! -z `git clean --dry-run --force -d $@` ]] && \
        git clean --dry-run --force -d $@ && \
        read -p 'Remove [Y/n]? ' && \
        case ${REPLY:-yes} in  \
            y | yes ) git clean --force -d $@;; \
            n | no );; \
            * ) echo \"I'll take that as a 'no'\";; \
        esac; \
    }; f"
    clx = "!f () { \
        [[ ! -z `git clean --dry-run --force -dx $@` ]] && \
        git clean --dry-run --force -dx $@ && \
        read -p 'Remove [Y/n]? ' && \
        case ${REPLY:-yes} in  \
            y | Y | yes ) git clean --force -dx $@;; \
            n | N | no );; \
            * ) echo \"I'll take that as a 'no'\";; \
        esac; \
    }; f"

    cane = commit --all --amend --no-edit
    wip = commit --all --message=[WIP]

    d = diff --ignore-all-space --word-diff-regex=[[:alnum:]_]+|[[:punct:]] --word-diff=color
    dc = diff --ignore-all-space --word-diff-regex=. --word-diff=color
    dd = diff --format= --stat
    dv = "!f () { \
        if [[ $# > 2 ]]; then \
            echo 'usage: git dv [<commit>] [<commit>]'; \
        else \
            code --new-window; \
            for it in `git diff $@ --name-only`; do \
                old=`mktemp --suffix="$it"`; \
                new=`mktemp --suffix="$it"`; \
                case $# in  \
                    0 ) git show HEAD:"$it" > "$old"; cat "$it" > "$new";; \
                    1 ) git show "$1":"$it" > "$old"; cat "$it" > "$new";; \
                    2 ) git show "$1":"$it" > "$old"; git show "$2":"$it" > "$new";; \
                esac; \
                code "$old" "$new" --diff; \
            done; \
        fi; \
    }; f"

    l = "!f () { \
        RESET=`echo -e '\\033[0m'`; \
        RED=`echo -e '\\033[38;2;255;0;0m'`; \
        LIGHT_RED=`echo -e '\\033[38;2;255;153;153m'`; \
        ORANGE=`echo -e '\\033[38;2;255;128;0m'`; \
        LIGHT_ORANGE=`echo -e '\\033[38;2;255;204;153m'`; \
        YELLOW=`echo -e '\\033[38;2;255;255;0m'`; \
        LIGHT_YELLOW=`echo -e '\\033[38;2;255;255;153m'`; \
        GREEN=`echo -e '\\033[38;2;0;255;0m'`; \
        LIGHT_GREEN=`echo -e '\\033[38;2;153;255;153m'`; \
        BLUE=`echo -e '\\033[38;2;0;0;255m'`; \
        LIGHT_BLUE=`echo -e '\\033[38;2;153;153;255m'`; \
        PINK=`echo -e '\\033[38;2;255;0;255m'`; \
        LIGHT_PINK=`echo -e '\\033[38;2;255;153;255m'`; \
        GRAY=`echo -e '\\033[38;2;128;128;128m'`; \
        DARK_GRAY=`echo -e '\\033[38;2;80;80;80m'`; \
        WHITE=`echo -e '\\033[38;2;255;255;255m'`; \
        DARK_WHITE=`echo -e '\\033[38;2;160;160;160m'`; \
        git log --color=always --decorate --graph --oneline -25 $@ | \
        sed \" \
            s/(build\\(?)([^)]*)(\\)?):/$YELLOW\\1$RESET$LIGHT_YELLOW\\2$RESET$YELLOW\\3$RESET:/; \
            s/(chore\\(?)([^)]*)(\\)?):(.*)/$DARK_GRAY\\1$RESET$GRAY\\2$RESET$DARK_GRAY\\3$RESET:$DARK_GRAY\\4$RESET/; \
            s/(docs\\(?)([^)]*)(\\)?):/$WHITE\\1$RESET$DARK_WHITE\\2$RESET$WHITE\\3$RESET:/; \
            s/(feat\\(?)([^)]*)(\\)?):/$GREEN\\1$RESET$LIGHT_GREEN\\2$RESET$GREEN\\3$RESET:/; \
            s/(fix\\(?)([^)]*)(\\)?):/$RED\\1$RESET$LIGHT_RED\\2$RESET$RED\\3$RESET:/; \
            s/(perf\\(?)([^)]*)(\\)?):/$BLUE\\1$RESET$LIGHT_BLUE\\2$RESET$BLUE\\3$RESET:/; \
            s/(refactor\\(?)([^)]*)(\\)?):(.*)/$DARK_GRAY\\1$RESET$GRAY\\2$RESET$DARK_GRAY\\3$RESET:$DARK_GRAY\\4$RESET/; \
            s/(style\\(?)([^)]*)(\\)?):/$PINK\\1$RESET$LIGHT_PINK\\2$RESET$PINK\\3$RESET:/; \
            s/(test\\(?)([^)]*)(\\)?):/$ORANGE\\1$RESET$LIGHT_ORANGE\\2$RESET$ORANGE\\3$RESET:/; \
        \" --regexp-extended; \
    }; f"
    la = l --all -1000000

    p = push
    pane = !git cane && git push --force

    edit = "!f () { \
        [[ `git rev-list ${1:-HEAD} --parents -1 | wc --words` == 1 ]] && \
        git -c sequence.editor=\"sed '1 s/pick/edit/' --in-place\" rebase --interactive --root || \
        git -c sequence.editor=\"sed '1 s/pick/edit/' --in-place\" rebase ${1:-HEAD}~1 --interactive; \
    }; f"
    reword = "!f () { \
        [[ `git rev-list ${1:-HEAD} --parents -1 | wc --words` == 1 ]] && \
        git -c sequence.editor=\"sed '1 s/pick/reword/' --in-place\" rebase --interactive --root || \
        git -c sequence.editor=\"sed '1 s/pick/reword/' --in-place\" rebase ${1:-HEAD}~1 --interactive; \
    }; f"

    del = reset HEAD~1 --hard
    ex = reset --hard
    kill = !git reset HEAD~1 --soft && git reset
    rollback =  !git rebase --abort";" \
                git clean --force -dx && \
                git reset --hard && \
                git checkout `git remote show origin | sed '/HEAD branch/s/.*: //p' --quiet` && \
                git reset origin/`git remote show origin | sed '/HEAD branch/s/.*: //p' --quiet` --hard

    s = show --ignore-all-space --word-diff-regex=[[:alnum:]_]+|[[:punct:]] --word-diff=color
    sc = show --ignore-all-space --word-diff-regex=. --word-diff=color
    ss = show --format= --stat
    sv = "!f () { \
        if [[ $# > 1 ]]; then \
            echo 'usage: git sv [<commit>]'; \
        else \
            case $# in  \
                0 ) git dv HEAD~1 HEAD;; \
                1 ) git dv "$1"~1 "$1";; \
            esac; \
        fi; \
    }; f"

    dot = stash show --patch
    drop = stash drop
    dup = stash apply
    hide = stash push
    reveal = stash pop
    shelve =    !. \"`git --exec-path`/git-sh-setup\" && \
                require_clean_work_tree shelve && \
                m=`git log --format=%B -1` && \
                git reset HEAD~1 --soft && \
                git stash push --message=\"$m\"
    unshelve =  !. \"`git --exec-path`/git-sh-setup\" && \
                require_clean_work_tree unshelve && \
                m=`git stash list --format=%B -1 | sed '1 s/On [^:]+: //' --regexp-extended` && \
                git stash pop && \
                git commit --all --message=\"$m\"

    st = status

[core]
    editor = code --wait
    pager =
    quotepath = false

[user]
    email = naoh432@mail.ru
    name = lucruum
